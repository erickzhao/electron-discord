// Copyright (c) 2021 Siberian, Inc. All rights reserved.

import { listener, LunaworkClient } from '@siberianmh/lunawork'
import { Message, MessageEmbed } from 'discord.js'
import { ExtendedModule } from '../../../lib/extended-module'

export class AntimalwareStage extends ExtendedModule {
  public constructor(client: LunaworkClient) {
    super(client)
  }

  private forbidExtensions = ['zip', 'tar.gz', 'tar', 'exe', 'dmg']

  /**
   * Identify messages with prohibted attachements.
   */
  @listener({ event: 'messageCreate' })
  public async onMessage(msg: Message) {
    // Return when message doesn't have attachment and don't moderate DMs
    if (msg.attachments.size <= 0 || !msg.guild) {
      return
    }

    // Ignore webhook and bot messages
    if (msg.webhookId || msg.author.bot) {
      return
    }

    const embed = new MessageEmbed().setDescription(
      'Seems like you are tried to upload the file that is forbidden to upload, if you are trying to provide a resource (e.g. reproduction) please use services like GitHub or Electron Fiddle.',
    )
    const extension = this.getMessageExtension(msg)

    if (!extension) {
      // ?
      return
    }

    if (!this.forbidExtensions.includes(extension)) {
      return
    }

    console.log(
      `User '${msg.author.tag}' (${msg.author.id}) uploaded a blacklisted file(s)`,
    )

    await msg.channel.send({
      content: `:wave: <@${msg.author.id}>`,
      embeds: [embed],
    })

    // Try to delete the message
    try {
      await msg.delete()
    } catch {
      console.error(
        `Tried to delete message '${msg.id}', but message could not be found.`,
      )
    }
  }

  private getMessageExtension(msg: Message) {
    const fileExtension = [...msg.attachments.values()][0].name
      ?.toLowerCase()
      .split('.')[1]

    return fileExtension
  }
}
